Modules in the radio95 radio player are quite simple.

First of all, ther are in total only 4 modules:
- Observer (PlayerModule), this module is a passive observer, you can use this as a status api or to send the song metadata to your RDS encoder
- Modifier (PlaylistModifierModule), module which intercepts the playlist before playing and replaced it, this module can shuffle the playlist, insert jingles or intros and outros
- (!) Advisor (PlaylistAdvisor), this module is very important and is required to run and there can be only one of these in a core session. It is responsible for picking the playlist file itself as in a file path. This can be a scheduler, or just a constant
- Active modifier (ActiveModifier), this module is optional, but there can still be only one. This module can replace the track while playing, allowing you to skip tracks or play tracks on demand, it can also extend the playlist

```python
@dataclass
class Track:
    path: str
    fade_out: bool
    fade_in: bool
    official: bool
    args: dict[str, str] | None

class PlayerModule:
    """
    Simple passive observer, this allows you to send the current track the your RDS encoder, or to your website
    """
    def on_new_playlist(self, playlist: list[Track]):
        """This is called every new playlist"""
        pass
    def on_new_track(self, index: int, track: Track):
        """
        Called on every track including the ones added by the active modifier, you can check for that comparing the playlists[index] and the track
        """
        pass
    def imc(self, imc: 'InterModuleCommunication'):
        """
        Receive an IMC object
        """
        pass
    def imc_data(self, source: 'PlayerModule | ActiveModifier | PlaylistAdvisor', data: object) -> object:
        pass
class PlaylistModifierModule:
    """
    Playlist modifier, this type of module allows you to shuffle, or put jingles into your playlist
    """
    def modify(self, global_args: dict, playlist: list[Track]):
        """
        global_args are playlist global args (see radioPlayer_playlist_file.txt)
        """
        return playlist
    # No IMC, as we only run on new playlists
class PlaylistAdvisor:
    """
    Only one of a playlist advisor can be loaded. This module picks the playlist file to play, this can be a scheduler or just a static file
    """
    def advise(self, arguments: str | None) -> str:
        """
        Arguments are the arguments passed to the program on startup
        """
        return "/path/to/playlist.txt"
    def new_playlist(self) -> bool:
        """
        Whether to play a new playlist, if this is True, then the player will refresh and fetch a new playlist, calling advise
        """
        return False
    def imc(self, imc: 'InterModuleCommunication'):
        """
        Receive an IMC object
        """
        pass
    def imc_data(self, source: 'PlayerModule | ActiveModifier | PlaylistAdvisor', data: object) -> object:
        pass
class ActiveModifier:
    """
    This changes the next song to be played live, which means that this picks the next song, not the playlist, but this is affected by the playlist
    """
    def arguments(self, arguments: str | None):
        """
        Called at start up with the program arguments
        """
        pass
    def play(self, index:int, track: Track) -> tuple[Track, bool] | tuple[None, None]:
        """
        Returns a tuple, in the first case where a is the track and b is a bool, b corresponds to whether to extend the playlist, set to true when adding content instead of replacing it
        When None, None is returned then that is treated as a skip, meaning the core will skip this song
        """
        return track, False
    def on_new_playlist(self, playlist: list[Track]):
        """
        Same behaviour as the basic module function
        """
        pass
    def imc(self, imc: 'InterModuleCommunication'):
        """
        Receive an IMC object
        """
        pass
    def imc_data(self, source: 'PlayerModule | ActiveModifier | PlaylistAdvisor', data: object) -> object:
        pass
class InterModuleCommunication:
    def __init__(self, advisor: PlaylistAdvisor, active_modifier: ActiveModifier | None, simple_modules: list[PlayerModule]) -> None:
        self.advisor = advisor
        self.active_modifier = active_modifier
        self.simple_modules = simple_modules
        self.names_modules: dict[str, PlaylistAdvisor | ActiveModifier | PlayerModule] = {}
    def broadcast(self, source: PlaylistAdvisor | ActiveModifier | PlayerModule, data: object) -> None:
        """
        Send data to all modules
        """
        self.advisor.imc_data(source, data)
        if self.active_modifier: self.active_modifier.imc_data(source, data)
        for module in self.simple_modules: module.imc_data(source, data)
    def register(self, module: PlaylistAdvisor | ActiveModifier | PlayerModule, name: str):
        if name in self.names_modules.keys(): return False
        self.names_modules[name] = module
        return True
    def send(self, source: PlaylistAdvisor | ActiveModifier | PlayerModule, name: str, data: object) -> object:
        if not name in self.names_modules.keys(): raise Exception
        return self.names_modules[name].imc_data(source, data)
```

Each module shall have a python script in the modules directory. Each of the modules need to define one or more global variables in order to be seen by the core:
- module (list['PlayerModule'] or 'PlayerModule'), this shall be just the list or one passive observer class
- playlistmod ('PlaylistModifierModule', list['PlaylistModifierModule'], tuple['PlaylistModifierModule' | list['PlaylistModifierModule'], int]), module itself, list of modules or the module itself and list of them with an index integer which sets the order of modifiers (0 is first)
- advisor ('PlaylistAdvisor')
- activemod ('ActiveModifier')